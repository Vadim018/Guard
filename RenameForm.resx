<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        2g0YSEDeAAAAAElFTkSuQmCC
</value>
  </data>
</root>