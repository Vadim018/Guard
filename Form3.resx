<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        RK5CYII=
</value>
  </data>
</root>